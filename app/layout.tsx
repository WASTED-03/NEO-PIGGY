import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="h-full">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased h-full bg-[rgb(var(--bg))] text-[rgb(var(--fg))]`}
      >
        <div className="min-h-screen">
          <header className="sticky top-0 z-40 border-b border-white/20 dark:border-white/10 bg-white/70 dark:bg-gray-900/60 backdrop-blur supports-[backdrop-filter]:bg-white/50">
            <div className="mx-auto max-w-7xl px-6 py-4 flex items-center justify-between">
              <a className="flex items-center gap-3" href="/">
                <div className="h-9 w-9 rounded-xl bg-gradient-to-tr from-indigo-500 via-violet-500 to-fuchsia-500 shadow ring-1 ring-white/20" />
                <div className="text-lg font-semibold">PiggyMetrics Modern</div>
              </a>
              <nav className="hidden md:flex items-center gap-6 text-sm">
                <a href="/accounts" className="hover:text-[rgb(var(--primary))]">Accounts</a>
                <a href="/statistics" className="hover:text-[rgb(var(--primary))]">Statistics</a>
                <a href="/notifications" className="hover:text-[rgb(var(--primary))]">Notifications</a>
              </nav>
              <AuthArea />
            </div>
          </header>
          <main className="mx-auto max-w-7xl px-6 py-10">{children}</main>
          <footer className="mt-16 border-t border-white/20 dark:border-white/10 py-10 text-sm text-gray-500">
            <div className="mx-auto max-w-7xl px-6 flex items-center justify-between">
              <p>© {new Date().getFullYear()} PiggyMetrics Modern</p>
              <div className="flex gap-5">
                <a className="hover:text-[rgb(var(--primary))]" href="/about">About</a>
                <a className="hover:text-[rgb(var(--primary))]" href="/terms">Terms</a>
                <a className="hover:text-[rgb(var(--primary))]" href="/privacy">Privacy</a>
              </div>
            </div>
          </footer>
        </div>
      </body>
    </html>
  );
}

async function AuthArea(): Promise<JSX.Element> {
  const res = await fetch(`${process.env.NEXT_PUBLIC_SITE_URL ?? ""}/api/auth/me`, {
    // Force server-side; next 14 app router can fetch internally
    cache: "no-store",
  }).catch(() => null);

  const data = await res?.json().catch(() => null);
  const user = data?.user as { id: string; email: string } | null | undefined;
  const role = (data?.profile?.role as string | undefined) ?? undefined;

  if (!user) {
    return (
      <div className="flex items-center gap-3">
        <a className="btn btn-outline" href="/auth/login">Log in</a>
        <a className="btn btn-primary" href="/auth/register">Sign up</a>
      </div>
    );
  }

  return (
    <form
      action="/api/auth/logout"
      method="post"
      className="flex items-center gap-3"
    >
      <div className="text-sm text-gray-600 dark:text-gray-300">
        {user.email} {role ? `• ${role}` : ""}
      </div>
      <button type="submit" className="btn btn-outline">Log out</button>
    </form>
  );
}
